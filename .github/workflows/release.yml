name: Build and Release

on:
  push:
    branches:
      - master

permissions:
  contents: write  # required for creating tags and releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3️⃣ Build your project (Maven example)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4️⃣ Read version from pom.xml and check if tag exists
      - name: Extract version and check tag
        id: version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$version" >> $GITHUB_OUTPUT
          if git rev-parse "v$version" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Stop early if version already released
      - name: Skip if release already exists
        if: steps.version.outputs.exists == 'true'
        run: |
          echo "⚠️ Release v${{ steps.version.outputs.version }} already exists. Skipping build."
          exit 0

      # 6️⃣ Prepare zip package (include .jar + any extra files)
      - name: Prepare release package
        run: |
          mkdir release
          cp target/*.jar release/
          cp -r lib/ release/ || true
          echo "${{ steps.version.outputs.version }}" > release/version.txt
          cd release
          zip -r "../sample-app-v${{ steps.version.outputs.version }}.zip" .

      # 7️⃣ Create Git tag
      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      # 8️⃣ Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: myapp-v${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}